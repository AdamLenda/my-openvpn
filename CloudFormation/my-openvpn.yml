AWSTemplateFormatVersion: 2010-09-09
Description: |-
  Provisions an OpenVPN server
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Capacity
        Parameters:
          - OpenVpnServerInstanceType

      - Label:
          default: Administration
        Parameters:
          - SSHKeyPair
          - YourCurrentPublicIp

    ParameterLabels:
      OpenVpnServerInstanceType:
        default: OpenVPN Instance Type

      SSHKeyPair:
        default: SSH Key Pair

      YourCurrentPublicIp:
        default: Your IP Address

Parameters:
  OpenVpnServerInstanceType:
    Type: String
    Description: |+
      t3.nano is recommended for a single user on a broad band connection. Instance pricing for your aws region is available here: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html

    Default: t3.nano
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small

  SSHKeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Select an AWS Key Pair that will be used to allow SSH to EC2 Instances

  YourCurrentPublicIp:
    Type: String
    Description: |-
      Your public IPv4 address which you can find here: https://www.google.com/search?q=my+ip
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: Must be an IPv4 address

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-vpc-details-lambda-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: !Sub "${AWS::StackName}-vpc-details-lambda-policy"
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: '*'
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - ec2:DescribeAddresses
            - ec2:DescribeSecurityGroups
            - cloudformation:DescribeStacks
            Resource: '*'

  VpcDetailsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-vpc-details-lambda"
      Description: !Sub "This function was created as part of the ${AWS::StackName} CloudFormation stack. It is called by that stack in order to determine which Machine Image, VPC and Subnet should host the OpenVPN server."
      Code:
        ZipFile: |+
          var aws = require("aws-sdk");
          exports.handler = function(event, context) {
            console.log("\nEvent:\n",event, "\nContext:\n", context);
            var rp=event.ResourceProperties;
            /*Validate*/
            if (event.RequestType === "Delete") {sendResponse(event, context, "SUCCESS"); return;}
            var responseStatus = "FAILED";
            if (!rp) {sendResponse(event, context, responseStatus, {Error: "Event.ResourceProperties Missing"}); return;}
            if (!rp.Region) {sendResponse(event, context, responseStatus, {Error: "Event.ResourceProperties.Region Missing"}); return;}

            var responseData = {};

            try {
              var ec2 = new aws.EC2({region: rp.Region});
              ec2.describeImages(
                {ExecutableUsers: ["all"], Filters: [{Name:"name", Values:["amzn2-ami-hvm-2.?.????????-x86_64-gp2"]},{Name:"state", Values:["available"]}]},
                function(e, result) {
                  if (e){throw e;}
                  if (!result){throw "Amazon Linux 2 Image Not Found"}
                  var responseData = {
                    ImageId: result.Images.shift().ImageId,
                  };

                  ec2.describeVpcs(
                    {Filters: [{Name: "isDefault", Values: ["true"]}]},
                    function(e, result) {
                      if (e){throw e;}
                      if (!result){throw "Default Vpc Not Found"}
                      var vpc = result.Vpcs.shift();
                      responseData.DefaultVpcId = vpc.VpcId;
                      responseData.DefaultVpcCidrBlock = vpc.CidrBlock;

                      ec2.describeSubnets(
                        {Filters: [{Name:"vpc-id", Values:["vpc-d6cd8faf"]},{Name:"default-for-az", Values:["true"]}]},
                        function(e, result) {
                          if (e){throw e;}
                          if (!result || !result.Subnets || result.Subnets.length < 1){throw "Subnet Not Found"}
                          var subnet = result.Subnets.sort(function(a,b){return b.AvailableIpAddressCount - a.AvailableIpAddressCount}).shift();
                          responseData.SubnetAvailabilityZone = subnet.AvailabilityZone;
                          responseData.SubnetAvailableIpAddressCount = subnet.AvailableIpAddressCount;
                          responseData.SubnetId = subnet.SubnetId;
                          sendResponse(event, context, "SUCCESS", responseData);
                        }
                      );
                    }
                  );
                }
              );
            } catch (error) {
              console.log("Failed to collect Image, VPC or Subnet information: ", error);
              sendResponse(event, context, "FAILED", {});
            }
          };

          // Send response to the pre-signed S3 URL
          function sendResponse(event, context, responseStatus, responseData) {
            console.log("responseData: ", JSON.stringify(responseData));
            if (!event.ResponseURL) {
              context.done();
              return;
            }
            var responseBody = JSON.stringify({
              Status: responseStatus,
              Reason: "See CloudWatch Log Stream: " + context.logStreamName,
              PhysicalResourceId: context.logStreamName,
              StackId: event.StackId,
              RequestId: event.RequestId,
              LogicalResourceId: event.LogicalResourceId,
              Data: responseData
            });

            var https = require("https");
            var url = require("url");

            var parsedUrl = url.parse(event.ResponseURL);
            var options = {
              hostname: parsedUrl.hostname,
              port: 443,
              path: parsedUrl.path,
              method: "PUT",
              headers: {
                "content-type": "",
                "content-length": responseBody.length
              }
            };

            var request = https.request(options, function(response) {
              console.log("Response sent");
              context.done();
            });

            request.on("error", function(error) {
              console.log("sendResponse Error:" + error);
              context.done();
            });

            request.write(responseBody);
            request.end();
          }

      Handler: index.handler
      Role: !GetAtt
      - LambdaExecutionRole
      - Arn
      Runtime: nodejs8.10
      Timeout: '30'
      Tags:
      - Key: name
        Value: !Sub "${AWS::StackName}"

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub "/aws/lambda/${VpcDetailsLambda}"
      RetentionInDays: 1

  VpcDetails:
    Type: Custom::VpcDetailsLambdaCall
    Properties:
      ServiceToken: !GetAtt VpcDetailsLambda.Arn
      Region: !Ref AWS::Region

  PublicSshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt VpcDetails.DefaultVpcId
      GroupName: !Sub '${AWS::StackName}-public-ssh'
      GroupDescription: Security Group to allow Public SSH Connections
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Sub "${YourCurrentPublicIp}/32"
      Tags:
      - Key: name
        Value: !Sub "${AWS::StackName}"

  PublicOpenVpnSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt VpcDetails.DefaultVpcId
      GroupName: !Sub "${AWS::StackName}-public-openvpn"
      GroupDescription: Security Group to allow Public TCP/UDP Connections on port 1194
      SecurityGroupIngress:
      - IpProtocol: udp
        FromPort: 1194
        ToPort: 1194
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: name
        Value: !Sub "${AWS::StackName}"

  OpenVpnServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-vpn-server-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com

  OpenVpnServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref OpenVpnServerRole
      InstanceProfileName: !Sub "${AWS::StackName}-vpn-server-profile"

  OpenVpnServer:
    Type: AWS::EC2::Instance
    Metadata:
      "AWS::CloudFormation::Init":
        configSets:
          Bootstrap:
          - DeploySourceFiles
        DeploySourceFiles:
          packages:
            rpm:
              epel: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum:
              openvpn: ["2.4.6"]
              ufw: ["0.35"]

          files:
            /usr/sbin/configure_openvpn:
              source: "https://s3.amazonaws.com/my-openvpn/v1.0/configure_openvpn.sh"
              mode: "000500"
              owner: "root"
              group: "root"

            /usr/sbin/configure_ufw_for_openvpn:
              source: "https://s3.amazonaws.com/my-openvpn/v1.0/configure_ufw_for_openvpn.sh"
              mode: "000500"
              owner: "root"
              group: "root"

            /usr/sbin/my-openvpn-key-maker:
              source: "https://s3.amazonaws.com/my-openvpn/v1.0/my-openvpn-key-maker.sh"
              mode: "000500"
              owner: "root"
              group: "root"

          commands:
            ConfigureOpenVpn:
              command:
                Fn::Sub:
                - |+
                  configure_ufw_for_openvpn \
                    --network-cidr-block ${DefaultVpcCidrBlock};
                  configure_openvpn  \
                    --network-cidr-block ${DefaultVpcCidrBlock} \
                    --vpn-client-ip-cidr-block ${VpcVpnClientCidrBlock}
                  my-openvpn-key-maker -m /etc/my-openvpn -s /etc/openvpn/server
                - {DefaultVpcCidrBlock: !GetAtt VpcDetails.DefaultVpcCidrBlock, VpcVpnClientCidrBlock: !Select [1, !Cidr [!GetAtt VpcDetails.DefaultVpcCidrBlock, 2, 8] ] }
              test: test ! -e /etc/openvpn/server/server.conf;

            StartOpenVpn:
              command: systemctl enable openvpn-server@server.service;
              test: |
                systemctl status openvpn-server@server.service  | grep 'Active: active (running)'; [[ $? != 0 ]];

            EnableOpenVpn:
              command: systemctl start openvpn-server@server.service;
              test: |
                test ! -e /etc/systemd/system/multi-user.target.wants/openvpn-server@server.service;

    Properties:
      AvailabilityZone: !GetAtt VpcDetails.SubnetAvailabilityZone
      KeyName: !Ref SSHKeyPair
      IamInstanceProfile: !Ref OpenVpnServerInstanceProfile
      InstanceType: !Ref OpenVpnServerInstanceType
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        Description: OpenVpnServer Public Network Interface
        DeviceIndex: 0
        GroupSet:
        - !Ref PublicSshSecurityGroup
        - !Ref PublicOpenVpnSecurityGroup
        SecondaryPrivateIpAddressCount: 0
        SubnetId: !GetAtt VpcDetails.SubnetId
      ImageId: !GetAtt VpcDetails.ImageId
      Tags:
        - Key: name
          Value: !Sub "${AWS::StackName}-server"
      UserData: !Base64
        Fn::Sub: |+
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap

          # Install the files and packages from the metadata
          /opt/aws/bin/cfn-init \
              -v \
              --region ${AWS::Region} \
              --stack ${AWS::StackName} \
              --resource OpenVpnServer \
              --configsets Bootstrap;

          # Signal the status from cfn-init
          /opt/aws/bin/cfn-signal \
              -e $? \
              --region ${AWS::Region} \
              --stack ${AWS::StackName} \
              --resource OpenVpnServer ;